
//---------------------------Menus-----------------------------------------------------------//
//Double-click menus for each ghost.
//Don't want ghost menus? Delete the calls to OnMouseDoubleClick functions in mouse.dic

//--OpenSakuraMenu---------------------------------------------------------------------------//

OpenSakuraMenu
{
	if TOINT(upsetAfterFriday)!=0
	{
		MenuAfterFriday
	}
	elseif isNilch == TOINT(1)
	{
		MenuNilch
	}
	else
	{
		MenuRun		
	}
}

//--MenuRun------------------------------------------------------------------------------------//

MenuAfterFriday
{
	"\0\s[0]\i[109]\i[2]* (Zilch seems upset.)\n\n\_q\b2" 
	--
	"\_q\b2" 
	--
 	"\![*]\q[Tell me something,altalk]\n/
	\![*]\q[Talk about...,TalkAbout]\n/	
	\![*]\q[Config Menu,ConfigAfterFriday]\n/	
//	\![*]\q[Functions,dosomething]\n/
//	\![*]\q[CheckDisorderLvl,CheckDisorderLvl]\n/	
//	\![*]\q[Hey Zilch can I pet you?,CanIPet]\n/		
//	\![*]\q[Test variable,testvariable]\n/	
 	\![*]\q[Nevermind,CANCEL]\n"	
}

ResetFridate
{
	sawDisorder    	 = TOINT(0)
	dateSetFriday  	 = TOINT(0)
	disorderClosed 	 = TOINT(0)
	fridatePhase   	 = TOINT(0)
	scienceClosed  	 = TOINT(0)
	upsetAfterFriday = TOINT(0)
	lockMenus 	 	 = TOINT(0)
	blockPet     	 = TOINT(0)	
	sorryDisorder	 = TOINT(0)	
	bootPhase	 = "Fridate"
}


Select.testvariable
{

	
}

MenuRun
 {	
 //	wd = GetWeekDay
 //	ap = GetAP
 //	nowmin = Getnowmin
 //	nowhour = Getnowhour
	//Info to display at bottom
	"\0\s[0]\i[7]\b2 %(z)...hmm?%(d)\n\n"
	--
	"\_q\b2" 
	--
	CheckLvlUpAll
	if lastTalk != ""
	{
	  "\![*]\q[Repeat,OnLastTalk]\n\n[half]"
	}
	--
 	"\![*]\q[Tell me something,altalk]\n\![*]\q[Talk about...,TalkAbout]\n\![*]\q[Config Menu,Config]\n	\![*]\q[Functions,dosomething]\n"
	--
	//if canPet == 0
	{
		"\![*]\q[Hey Zilch can I pet you?,CanIPet]\n"		
	}
	--
	"\![*]\q[Nevermind,CANCEL]\n"
	--
	"\n"
	--
//	zilchThought
	--
	if sinList != ""
	{
		"\n\![*]\q[Apologize,ApologozeForWhat]"		
	}
	--
	if (canHaveCandy == 1)
	{
		"\n\![*]\q[Give candy bytes,Nums]"
	}
	--
	if (waitingForProof == 1)
	{
		"\n\![*]Zilch is waiting for a proof.\q[(?),ProofHints]"
	}			
	--
	if (drawingInTrash == 1)
	{
		"\n\![*]Zilch is still upset about that drawing.\q[(?),DrawingInTrash]"		
	}
	--
//	if disorderLvl >= 4 && disorderClosed ==0 && sawDisorder == 0
//	{
//		"\n\![*]Disorder level is %(disorderLvl)"
//	}	
	--
	if (dateSetFriday == 1 && sawDisorder == 0)
	{
		"\n\![*]Got a date this friday night."
	}
	--
	if familiarity > 100 && sawDisorder ==2 && artLvl > TOINT(maxArtLvl) && brotherLvl > TOINT(maxBrotherLvl) && homeLvl >3 && truthButton==0
	{
		"\n\![*]You wonder what's next.\q[(?),WhatNext]"		
	}
	--
//	"\ntruthButton is %(truthButton)\n"
	--
	if truthButton == 1
	{
		//"\n\n\![*]If you want to tell them the truth, just press \n\q[%(thisButton),OnSpill]"
		"\n\n\![*]If you want to tell them the truth, just press \n   \![*]\q[...THIS BUTTON,OnSpill]"
	}
	--
//	"\n\n\![*]\q[Test variable,testvariable]\n\n"	
	//"\n%(green)La la la la la!\%(wx)\n%(blue)La la la la la!\%(wx)\n%(red)La la la la la!\%(wx)\n%(purple)La la la la la!\%(wx)\n"
//	--
	//"\_l[115,260]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)"
//	--
//	"%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)"	 
//	--
//	"Run Time: %(passhour):%(passmin)  %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	--
	"\e"
	//Envelopes at the end (word.dic)
}


//thisButton
//{
//	" %(green)T%(cyan)H%(red)I%(purple)S %(orange)B%(purple)U%(cyan)T%(orange)T%(green)O%(orange)N"
//}

Select.Nums
{
	"\0\s[0]\i[108]\i[109]%(z)Nums!\%(wx)%(d)\0\s[0]"
	--
	LessUpsetNow
}

//--------------------------------------------------------------
Select.WhatNext
{
	case hintWhatNext
	{
		when 0 
		{
			"\0\s[0]* (Zilch's dialouge has been repeating lately.)\%(wx)"
			hintWhatNext++
		}		
		when 1 
		{
			"\0\s[0]* (You wonder if you've seen all the lines already.)\%(wx)"
			hintWhatNext++
		}		
		when 2 
		{
			"\0\s[0]* (You wonder if this is all building towards something.)\%(wx)"
			hintWhatNext++
		}
		when 3
		{
			"\0\s[0]* (You wonder if there's something you want to finish with first.)\%(wx)"
			hintWhatNext++			
		}
		when 4
		{
			"\0\s[0]\q[* (Pssst),OnPsst]\%(wx)"
		}
	}
	
	
	 
	
}

//--------------------------------------------------------------
Select.CanIPet
{
	if familiarity > 20
	{
		if upset!=0
		{
			"\0\s[0]\i[5]%(z)\%(wx).\%(wx).\%(wx).\%(wx)No.%(d)\n"
			--
			LessUpsetNow		
		}		
		else
		{
			"\0\s[0]%(z)Yeah, I guess...%(d)\%(wx)\n\n* (GO FOT IT.)"	
			--
			canPet = 1			
		}
	}
	else
	{
		"\0\s[0]\i[109]%(z)Um...\i[8]\%(wx)\nWell...\%(wx)\nYou know...%(d)\%(wx)\n\%(wx)\c* (Their voice trails off.\%(wx) It's embarassing.\%(wx) Change the subject.)\%(wx)\0\s[0]\e"			
	}
}

//--------------------------------------------------------------

Select.DrawingInTrash
{
	"* (Maybe you can give it back to them.)\e"
}

//--------------------------------------------------------------
Select.ProofHints
{
	case hintproof
	{
		when 0
		{
			"* (Give them a 'proof'!\%(wx) It doesn't matter what it is,\%(wx) as long as it's a   'proof'.\w)\e"
			hintproof ++	
		}
		when 1
		{
			"* (Just drop a 'proof' on them.)\%(wx)\e"
			hintproof ++
		}
		when 2
		{
			"* (Drag and drop it.)\%(wx)\e"
			hintproof ++
		}
		when 3
		{
			"* (That's all I've got.)\%(wx)\e"	
		}
	}
}

//------External Config Menu-----------------//

Select.Config
{
	Config
}

Select.TalkAbout
{
	familiarity++
	--
	if comforter>0
	{
		comforter--
		LessUpsetNow
	}
	--
	TalkAbout
}

//Keep as is
Select.altalk
{
	AiTalk
}

Select.actmenu
{
	ActMenu
}

//Keep as is
OnLastTalk 
{
"%(lastTalk)\e"
}

//Keep as is
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//Keep as is
GetAP
{
 	if hour >= 0 && hour <= 11
 	{
 		"AM"
 	}
 	else
 	{
 		"PM"
 	}
}

//Keep as is
Getnowmin
{
	if minute >= 0 && minute <=9
	{
		"0%(minute)"
	}
	else
	{
		"%(minute)"
	}
}

//Keep as is
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
	{
		"0%(hour12)"
	}
	else
	{
		"%(hour12)"
	}
}

//go back to MenuRun.
Select.BACKTOMENU
{
	MenuRun
}

//linked to OnTeachName in nameteach.dic. 
Select.TEACHNAME
{
	OnTeachName	
}

Select.CANCEL
{
}

Select.dosomething
{
	"\0\s[0]\b2* (Zilch can...)\n\n"
	--
	"\![*]\q[Open Calendar,CALENDAR]\n/
//	\![*]\q[Check Email,MailCheck]\n/
	\![*]\q[Open SSP Preferences,sspconfig]\n/
	\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
	\![*]\q[Give System Information,ChoiceSystemInformation]\n\n/
	\![*]\q[Do nothing BWAHAHA!!!,BACKTOMENU]\e"
}

Select.CALENDAR
{
	"\0\s[0]\![open,calendar]\e"
}

Select.sspconfig
{
	"\0\s[0]\![open,configurationdialog]\e"
}

Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//SAORI plug-in. Keep as is
	
	{
		"\0\s[0]%(z)Meh,\0\s[0]\i[102] I'll do it later.%(d)\%(wx)\0\s[0]\i[105] \n\n* (Zilch is procrastinating.\%(wx)\0\s[0]"
	
		"\0\s[0]* (Zilch goes to check the recycle bin.)\n\n[half]\%(wx)\%(wx)\s[-1]* (They fall in.)\%(wx)\%(wx)\%(wx)\%(wx)\%(wx)\c\0\s[0]\i[117]\i[8]\i[56]%(z)It's okay!\%(wx) I'm fine now!%(d)\%(wx)\n\n[half]\0\s[0]* (Did they take out the garbage at least?)\%(wx)\n\n[half]\0\s[0]\i[107]%(z)Um...%(d)\%(wx)\n\n[half]* (They did not.\%(wx)\0\s[0]"
		--
		if _gomicheck >= 1 //is full.
		{
			" You take care of it yourself.) \![raise,OnGarbagecanEmpty]\e"
		}	
		elseif _gomicheck ==0
		{
			" Good thing the bin is already empty.)\%(wx)\e"
		}
	
	}

	
	if _gomicheck == 0 //is empty.
	{
		"\0\s[0]* (Zilch goes to check the recycle bin.)\n\n[half]\%(wx)\%(wx)\%(wx)\s[-1]\%(wx)\%(wx)\%(wx)\%(wx)\%(wx)\c\0\s[0]\i[118]\i[105]%(z)It was empty!%(d)\0\s[0]\e"
	}
	elseif _gomicheck >= 1 //is full.
	{
		"\0\s[0]* (Zilch goes to check the recycle bin.)\n\n[half]\%(wx)\%(wx)\%(wx)\s[-1]\![raise,OnGarbagecanEmpty]\%(wx)\%(wx)\%(wx)\%(wx)\%(wx)\c\0\s[0]%(z)Done!%(d)\e"
	}	


}

//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//another SAORI, keep as is
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"\0\s[0]\b[2]\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]\e"
}
	
//The rest of this function plays out in etc.dic. 
Select.MailCheck
{
		"\![biff]\e"
}

//Headlines are detailed more in etc.dic.
Select.HEADLINECANCEL
{
 		"\0\s[0]* (Finished with headlines.)\e"
}

	
//---- OnChoiceTimeout ---------------------------------------------------------//
OnChoiceTimeout
 {
	 if (wanthome == TOINT(1)) //again, allowing event to timeout
	{
		"\0\s[0]* (Finally,\%(wx) they get tired of crying.)\%(wx)"
		--
		ResetWantHome
	}
	elseif upsetAfterFriday==TOINT(0) && upset==TOINT(0) && isNilch == TOINT(0)
	{
		"\0\s[0]%(z)Sorry, I got distracted.%(d)\%(wx)\e"
	
		"\0\s[0]%(z)Is that a butterfly?%(d)\%(wx)\e"
	
		"\0\s[0]* (Zilch forgot what they wanted to say.)\%(wx)\e"	
	}
	elseif isNilch == TOINT(1)
	{
		"\0\s[0]\i[9]%(n)...marvelous.\%(wx)%(d)\e"		
	}
	else
	{
		"\0\s[0]%(z)...\%(wx)\e"
	}
 }

//---- Secondary Character Menu ---------------------------------------------------------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

//--Test Variable --------------------------------------------------------//

CheckDisorderLvl
{
	"\nDisLvl=%(disorderLvl) DisExp=%(disorderExp) DisPaused=%(disorderPaused)\n"
}


CheckExp
{
	"\nthisPlaceExp   %(thisPlaceExp)\ndreamsExp 	    %(dreamsExp)\nthemselfExp    %(themselfExp)\nhomeExp 	    %(homeExp)\nbrotherExp 	%(brotherExp)\nparentsExp 	%(parentsExp)\naccidentExp    %(accidentExp)\nartExp 		%(artExp)\nscienceExp 	%(scienceExp)\nharmonicaExp   %(harmonicaExp 	)\ndisorderExp 	%(disorderExp)\nfriendsExp 	%(friendsExp)\n"
}

CheckLvl
{
	"\nthisPlaceLvl   	%(thisPlaceLvl)\ndreamsLvl 	    %(dreamsLvl)\nthemselfLvl    	%(themselfLvl)\nhomeLvl 	    %(homeLvl)\nbrotherLvl 		%(brotherLvl)\nparentsLvl 		%(parentsLvl)\naccidentLvl 	%(accidentLvl)\nartLvl 		%(artLvl)\nscienceLvl 		%(scienceLvl)\nharmonicaLvl   	%(harmonicaLvl)\ndisorderLvl 	%(disorderLvl)\nfriendsLvl 		%(friendsLvl)\n"
}



//---- Secondary Character Menu ---------------------------------------------------------

OpenKeroMenu
{
	"\1\s[10]* (This is a garbage bin.)"
 	--
	"\n\n[half]\![*]\q[Pet it,PetGarbage]\n\![*]\q[Talk to it,TalkToGarbage]\n\![*]\q[Dumpster dive,LookInGarbage]\n\![*]\q[Nothing,keroCANCEL]\e"	 
}

Select.PetGarbage
{
	"\1\s[10]* (You pet the garbage bin.\%(wx) Good garbage bin.)\%(wx)\n\e"	
}

Select.TalkToGarbage
{
	"\1\s[10]* (You talk to the garbage bin.\%(wx) It doesn't answer.\%(wx) Because\w8 it's a garbage bin.)\%(wx)\n\e"		
}

Select.LookInGarbage
{
	"\1\s[10]* (Zilch's drawing is still in here.)\%(wx)\n\n[half]"
	--
	DrawingGarbage
}

DrawingGarbage
{
	"\![*]\q[Look at it,OpenDrawing]\n\![*]\q[Give it back to them?,GiveDrawing]\n\![*]\q[EAT THE DRAWING BWAHAHA,EatDrawing]\n\e"		
}

Select.OpenDrawing
{
	"\![open,file,DragonZilch.png]"
	--
	DrawingGarbage
}

Select.GiveDrawing
{
	drawingInTrash = 2
	--
	artExp = artExp + 3
	--
	LessUpsetNow
	--
	"\0\s[0]You say:\n\n[half]You know kid.\%(wx) When you throw away your past...\%(wx) You throw away your future.\%(wx)\%(wx)\c%(z)\0\s[0]\i[107]Um,\%(wx) thank you.\%(wx)%(d)\n\n\![*]\q[Push sunglasses up,nothing].\n\e"
	--
	"\1\s[-1]"
}

Select.EatDrawing
{
	drawingInTrash = 2
	--
	"\0\s[0]* (You chew the drawing in front of Zilch.)\%(wx)\n\n[half]"
	--
	upset+=5
	latestSin = "AteDrawing"
	AddSinToList
	--
	"%(z)\0\s[0]Did you just take this out of the trash?\%(wx)%(d)\n\n[half]\![*]\q[Yes,Chewing]\n\![*]\q[No,Chewing]\n"	
	--
	"\1\s[-1]"
}

Select.Chewing
{
	"\0\s[0]* (Your mouth is full.)\%(wx)\n\e"	
}

LessUpsetNow
{
	if upset >0
	{
		upset--		
	}
	else
	{
		comforter++
	}
}
		
AddSinToList
{
	if sinList != ""
	{
		sinList += ","		
	}
	--
	sinList += latestSin
}	
			
TestList
{
	testList = "list1,list2,list3"
	--
	sss = ARRAYSIZE(testList)
	--
	"testList size is %(sss)\n"
	--
	"testList[0] is %(testList[0])\n"
	--
	sss--
	--
	"testList[s-1] is %(testList[sss])"
}
 
Select.ApologozeForWhat
{
	sinListSize = ARRAYSIZE(sinList)
	--
	if sinIndex <  sinListSize
	{
		"* (You apologize for "
		--
		case sinList[sinIndex] 
		{
			when  "KeptTired"					
			{
				"keeping them here when they're tired.)\%(wx)\n\n"
			}
			when  "DanceBad"                               
			{
				"disrespecting their dance skills.)\%(wx)\n\n"				
			}
			when  "HarmonicaBad"                           
			{
				"doubting their future as a musician.)\%(wx)\n\n"					
			}
			when  "ArtCritique"	                                    
			{
				"that art critique thing \%(wx)you\%(wx) decided to do.)\%(wx)\n\n"				
			}
			when  "AteDrawing"                                 
			{
				"eating their drawing.\%(wx) You were extremely hungry.\%(wx)\n\n"
			}
			when  "StopCrying"		
			{
				"being mean to them when they were crying.\%(wx)\n\n"
			}	
		}
		--
		ApologyResponse
	}
	else  //_size==0 or  //_size!=0 but sinIndex==_size
	{
		ApologizeForNothing
	}
}	
 
 ApologizeForNothing
 {
	"* (There is nothing new to apologize for.\%(wx) " 
	--
	"You apologize for being too pretty.)\%(wx)"
	
	"You apologize for loving pineapple pizza.)\%(wx)"	

	"You apologize for disco.)\%(wx)"
	
	--
	"\0\s[0]\i[103]\i[102]\n\n%(z)I forgive you for that!%(d)\0\s[0]"		 
 }
 
ApologyResponse
{
	LessUpsetNow
	--
//	"\nsinListSize is %(sinListSize) sinIndex is %(sinIndex)\n"
	--
	if sinListSize <3 && sinIndex<2  //1,2    0,1
	{
		"\0\s[0]\i[111]\i[108]%(z)Of course I forgive you"
		--
		if comforter!=0
		{
			",\%(wx) my friend!%(d)\%(wx)\0\s[0]"
		}
		else
		{
			"!\%(wx)\0\s[0]"
		}
		--
		upset = TOINT(0)
	}
	elseif sinListSize>=3 && sinIndex<2 //3,4,5,6    0,1
	{
		"\0\s[0]\i[109]%(z)Oh.\%(wx)\0\s[0] Apology accepted,\%(wx) then.\%(wx)%(d)\0\s[0]"
	}	
	elseif sinListSize >=4 && sinIndex >=4 	//4,5    4,5
	{
		"\0\s[0]\i[122]\i[105]%(z)Yes,\%(wx) yes,\%(wx) whatever.\%(wx)%(d)\0\s[0]"
	}
	elseif sinListSize>=2 && sinIndex>=2	//2,3    2,3
	{
		"\0\s[0]\i[108]\i[109]%(z)You seem to regret many of the things you do!\%(wx) \0\s[0]\i[114]\i[115]\i[55]\i[54]You must be a very impulsive person!\%(wx)\0\s[0]%(d)"
	}		
	--
	sinIndex++
}
